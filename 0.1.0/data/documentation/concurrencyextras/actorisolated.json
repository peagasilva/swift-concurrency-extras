{"seeAlsoSections":[{"title":"Data races","identifiers":["doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/LockIsolated"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ActorIsolated"}],"title":"ActorIsolated","roleHeading":"Class","role":"symbol","symbolKind":"class","externalID":"s:17ConcurrencyExtras13ActorIsolatedC","modules":[{"name":"ConcurrencyExtras"}],"navigatorTitle":[{"kind":"identifier","text":"ActorIsolated"}]},"abstract":[{"type":"text","text":"A generic wrapper for isolating a mutable value to an actor."}],"sections":[],"identifier":{"url":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated","interfaceLanguage":"swift"},"relationshipsSections":[{"identifiers":["doc:\/\/ConcurrencyExtras\/s8SendableP","doc:\/\/ConcurrencyExtras\/ScA","doc:\/\/ConcurrencyExtras\/12_Concurrency8AnyActorP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"hierarchy":{"paths":[["doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated\/init(_:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated\/value"]},{"title":"Instance Methods","identifiers":["doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated\/setValue(_:)","doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated\/withValue(_:)"]}],"variants":[{"paths":["\/documentation\/concurrencyextras\/actorisolated"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"ActorIsolated"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This type is most useful when writing tests for when you want to inspect what happens inside an"},{"type":"text","text":" "},{"type":"text","text":"async operation."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, suppose you have a feature such that when a button is tapped you track some"},{"type":"text","text":" "},{"type":"text","text":"analytics:"}]},{"type":"codeListing","syntax":"swift","code":["struct AnalyticsClient {","  var track: (String) async -> Void","}","","class FeatureModel: ObservableObject {","  let analytics: AnalyticsClient","  \/\/ ...","  func buttonTapped() {","    \/\/ ...","    await self.analytics.track(\"Button tapped\")","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then, in tests we can construct an analytics client that appends events to a mutable array"},{"type":"text","text":" "},{"type":"text","text":"rather than actually sending events to an analytics server. However, in order to do this in a"},{"type":"text","text":" "},{"type":"text","text":"safe way we should use an actor, and "},{"type":"codeVoice","code":"ActorIsolated"},{"type":"text","text":" makes this easy:"}]},{"type":"codeListing","syntax":"swift","code":["func testAnalytics() async {","  let events = ActorIsolated<[String]>([])","  let analytics = AnalyticsClient(","    track: { event in await events.withValue { $0.append(event) } }","  )","  let model = FeatureModel(analytics: analytics)","  model.buttonTapped()","  await events.withValue {","    XCTAssertEqual($0, [\"Button tapped\"])","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To synchronously isolate a value, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/LockIsolated"},{"type":"text","text":"."}]}]}],"references":{"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/ActorIsolated/setValue(_:)":{"role":"symbol","title":"setValue(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"setValue"},{"kind":"text","text":"(() "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"}],"abstract":[{"type":"text","text":"Overwrite the isolated value with a new value."}],"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated\/setValue(_:)","kind":"symbol","type":"topic","url":"\/documentation\/concurrencyextras\/actorisolated\/setvalue(_:)"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/ActorIsolated":{"role":"symbol","title":"ActorIsolated","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ActorIsolated"}],"abstract":[{"type":"text","text":"A generic wrapper for isolating a mutable value to an actor."}],"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ActorIsolated"}],"url":"\/documentation\/concurrencyextras\/actorisolated"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/ActorIsolated/withValue(_:)":{"role":"symbol","title":"withValue(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withValue"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"abstract":[{"type":"text","text":"Perform an operation with isolated access to the underlying value."}],"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated\/withValue(_:)","kind":"symbol","type":"topic","url":"\/documentation\/concurrencyextras\/actorisolated\/withvalue(_:)"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/ActorIsolated/init(_:)":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(() "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"}],"abstract":[{"type":"text","text":"Initializes actor-isolated state around a value."}],"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated\/init(_:)","kind":"symbol","type":"topic","url":"\/documentation\/concurrencyextras\/actorisolated\/init(_:)"},"doc://ConcurrencyExtras/ScA":{"type":"unresolvable","title":"_Concurrency.Actor","identifier":"doc:\/\/ConcurrencyExtras\/ScA"},"doc://ConcurrencyExtras/12_Concurrency8AnyActorP":{"type":"unresolvable","title":"_Concurrency.AnyActor","identifier":"doc:\/\/ConcurrencyExtras\/12_Concurrency8AnyActorP"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/LockIsolated":{"role":"symbol","title":"LockIsolated","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockIsolated"}],"abstract":[{"type":"text","text":"A generic wrapper for isolating a mutable value with a lock."}],"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/LockIsolated","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"LockIsolated"}],"url":"\/documentation\/concurrencyextras\/lockisolated"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/ActorIsolated/value":{"role":"symbol","title":"value","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"}],"abstract":[{"type":"text","text":"The actor-isolated value."}],"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated\/value","kind":"symbol","type":"topic","url":"\/documentation\/concurrencyextras\/actorisolated\/value"},"doc://ConcurrencyExtras/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/ConcurrencyExtras\/s8SendableP"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras":{"role":"collection","title":"ConcurrencyExtras","abstract":[{"type":"text","text":"Useful, testable Swift concurrency."}],"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras","kind":"symbol","type":"topic","url":"\/documentation\/concurrencyextras"}}}