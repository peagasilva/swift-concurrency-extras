{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withValue"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"operation"},{"kind":"text","text":": ("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The result of the operation."}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Useful for modifying a value in a single transaction."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Isolate an integer for concurrent read\/write access:","let count = ActorIsolated(0)","","func increment() async {","  \/\/ Safely increment it:","  await self.count.withValue { $0 += 1 }","}"]},{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Because XCTest assertions donâ€™t play nicely with Swift concurrency, "},{"type":"codeVoice","code":"withValue"},{"type":"text","text":" also"},{"type":"text","text":" "},{"type":"text","text":"provides a handy interface to peek at an actor-isolated value and assert against it:"}]},{"type":"codeListing","syntax":"swift","code":["let didOpenSettings = ActorIsolated(false)","let model = withDependencies {","  $0.openSettings = { await didOpenSettings.setValue(true) }","} operation: {","  FeatureModel()","}","await model.settingsButtonTapped()","await didOpenSettings.withValue { XCTAssertTrue($0) }"]}],"type":"aside","name":"Tip"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/concurrencyextras\/actorisolated\/withvalue(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated\/withValue(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Perform an operation with isolated access to the underlying value."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withValue"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"title":"withValue(_:)","roleHeading":"Instance Method","role":"symbol","symbolKind":"method","externalID":"s:17ConcurrencyExtras13ActorIsolatedC9withValueyqd__qd__xzYbKXEKlF","modules":[{"name":"ConcurrencyExtras"}]},"hierarchy":{"paths":[["doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras","doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated"]]},"references":{"doc://ConcurrencyExtras/documentation/ConcurrencyExtras":{"role":"collection","title":"ConcurrencyExtras","abstract":[{"type":"text","text":"Useful, testable Swift concurrency."}],"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras","kind":"symbol","type":"topic","url":"\/documentation\/concurrencyextras"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/ActorIsolated":{"role":"symbol","title":"ActorIsolated","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ActorIsolated"}],"abstract":[{"type":"text","text":"A generic wrapper for isolating a mutable value to an actor."}],"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ActorIsolated"}],"url":"\/documentation\/concurrencyextras\/actorisolated"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/ActorIsolated/withValue(_:)":{"role":"symbol","title":"withValue(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withValue"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"abstract":[{"type":"text","text":"Perform an operation with isolated access to the underlying value."}],"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated\/withValue(_:)","kind":"symbol","type":"topic","url":"\/documentation\/concurrencyextras\/actorisolated\/withvalue(_:)"}}}