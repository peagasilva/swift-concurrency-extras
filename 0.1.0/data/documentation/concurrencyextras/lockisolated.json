{"seeAlsoSections":[{"title":"Data races","identifiers":["doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockIsolated"}],"title":"LockIsolated","roleHeading":"Class","role":"symbol","symbolKind":"class","externalID":"s:17ConcurrencyExtras12LockIsolatedC","modules":[{"name":"ConcurrencyExtras"}],"navigatorTitle":[{"kind":"identifier","text":"LockIsolated"}]},"abstract":[{"type":"text","text":"A generic wrapper for isolating a mutable value with a lock."}],"sections":[],"identifier":{"url":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/LockIsolated","interfaceLanguage":"swift"},"relationshipsSections":[{"identifiers":["doc:\/\/ConcurrencyExtras\/SQ","doc:\/\/ConcurrencyExtras\/SH","doc:\/\/ConcurrencyExtras\/s8SendableP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"hierarchy":{"paths":[["doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/LockIsolated\/init(_:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/LockIsolated\/value"]},{"title":"Instance Methods","identifiers":["doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/LockIsolated\/setValue(_:)","doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/LockIsolated\/withValue(_:)"]},{"title":"Subscripts","identifiers":["doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/LockIsolated\/subscript(dynamicMember:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/LockIsolated\/Equatable-Implementations","doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/LockIsolated\/Hashable-Implementations"],"generated":true}],"variants":[{"paths":["\/documentation\/concurrencyextras\/lockisolated"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@dynamicMemberLookup"},{"kind":"text","text":" "},{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockIsolated"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To asynchronously isolate a value on an actor, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated"},{"type":"text","text":". If you trust the"},{"type":"text","text":" "},{"type":"text","text":"sendability of the underlying value, consider using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/UncheckedSendable"},{"type":"text","text":", instead."}]}]}],"references":{"doc://ConcurrencyExtras/documentation/ConcurrencyExtras":{"role":"collection","title":"ConcurrencyExtras","abstract":[{"type":"text","text":"Useful, testable Swift concurrency."}],"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras","kind":"symbol","type":"topic","url":"\/documentation\/concurrencyextras"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/LockIsolated/Equatable-Implementations":{"role":"collectionGroup","title":"Equatable Implementations","abstract":[],"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/LockIsolated\/Equatable-Implementations","kind":"article","type":"topic","url":"\/documentation\/concurrencyextras\/lockisolated\/equatable-implementations"},"doc://ConcurrencyExtras/SQ":{"type":"unresolvable","title":"Swift.Equatable","identifier":"doc:\/\/ConcurrencyExtras\/SQ"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/ActorIsolated":{"role":"symbol","title":"ActorIsolated","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ActorIsolated"}],"abstract":[{"type":"text","text":"A generic wrapper for isolating a mutable value to an actor."}],"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/ActorIsolated","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ActorIsolated"}],"url":"\/documentation\/concurrencyextras\/actorisolated"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/LockIsolated/Hashable-Implementations":{"role":"collectionGroup","title":"Hashable Implementations","abstract":[],"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/LockIsolated\/Hashable-Implementations","kind":"article","type":"topic","url":"\/documentation\/concurrencyextras\/lockisolated\/hashable-implementations"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/LockIsolated/value":{"conformance":{"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"value","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"}],"abstract":[{"type":"text","text":"The lock-isolated value."}],"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/LockIsolated\/value","kind":"symbol","type":"topic","url":"\/documentation\/concurrencyextras\/lockisolated\/value"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/UncheckedSendable":{"role":"symbol","title":"UncheckedSendable","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"UncheckedSendable"}],"abstract":[{"type":"text","text":"A generic wrapper for turning any non-"},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" type into a "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" one, in an unchecked"},{"type":"text","text":" "},{"type":"text","text":"manner."}],"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/UncheckedSendable","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"UncheckedSendable"}],"url":"\/documentation\/concurrencyextras\/uncheckedsendable"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/LockIsolated/init(_:)":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(() "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"}],"abstract":[{"type":"text","text":"Initializes lock-isolated state around a value."}],"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/LockIsolated\/init(_:)","kind":"symbol","type":"topic","url":"\/documentation\/concurrencyextras\/lockisolated\/init(_:)"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/LockIsolated/subscript(dynamicMember:)":{"role":"symbol","title":"subscript(dynamicMember:)","fragments":[{"kind":"keyword","text":"subscript"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Subject"},{"kind":"text","text":">("},{"kind":"externalParam","text":"dynamicMember"},{"kind":"text","text":" _: "},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Subject"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Subject"}],"abstract":[],"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/LockIsolated\/subscript(dynamicMember:)","kind":"symbol","type":"topic","url":"\/documentation\/concurrencyextras\/lockisolated\/subscript(dynamicmember:)"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/LockIsolated/setValue(_:)":{"role":"symbol","title":"setValue(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"setValue"},{"kind":"text","text":"(() "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"}],"abstract":[{"type":"text","text":"Overwrite the isolated value with a new value."}],"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/LockIsolated\/setValue(_:)","kind":"symbol","type":"topic","url":"\/documentation\/concurrencyextras\/lockisolated\/setvalue(_:)"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/LockIsolated":{"role":"symbol","title":"LockIsolated","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"LockIsolated"}],"abstract":[{"type":"text","text":"A generic wrapper for isolating a mutable value with a lock."}],"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/LockIsolated","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"LockIsolated"}],"url":"\/documentation\/concurrencyextras\/lockisolated"},"doc://ConcurrencyExtras/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/ConcurrencyExtras\/s8SendableP"},"doc://ConcurrencyExtras/SH":{"type":"unresolvable","title":"Swift.Hashable","identifier":"doc:\/\/ConcurrencyExtras\/SH"},"doc://ConcurrencyExtras/documentation/ConcurrencyExtras/LockIsolated/withValue(_:)":{"role":"symbol","title":"withValue(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withValue"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"abstract":[{"type":"text","text":"Perform an operation with isolated access to the underlying value."}],"identifier":"doc:\/\/ConcurrencyExtras\/documentation\/ConcurrencyExtras\/LockIsolated\/withValue(_:)","kind":"symbol","type":"topic","url":"\/documentation\/concurrencyextras\/lockisolated\/withvalue(_:)"}}}